{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module TestProtoOneof where
import qualified Prelude as Hs
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Wire as HsProtobuf
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.Monad as Hs
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.ByteString as Hs
import qualified Data.String as Hs (fromString)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Generics as Hs
import qualified GHC.Enum as Hs
 
data Something = Something{somethingValue :: Hs.Int64,
                           somethingAnother :: Hs.Int32,
                           somethingNameOrId :: SomethingNameOrId}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named Something where
        nameOf _ = (Hs.fromString "Something")
 
instance HsProtobuf.Message Something where
        encodeMessage _
          Something{somethingValue = somethingValue,
                    somethingAnother = somethingAnother,
                    somethingNameOrId = somethingNameOrId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (HsProtobuf.Signed somethingValue)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (HsProtobuf.Signed somethingAnother)),
                case somethingNameOrId of
                    SomethingNameOrIdName x
                      -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4) x)
                    SomethingNameOrIdSomeid x
                      -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9) x)
                    SomethingNameOrId_NOT_SET -> Hs.mempty])
        decodeMessage _
          = (Hs.pure Something) <*>
              ((Hs.pure HsProtobuf.signed) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              ((Hs.pure HsProtobuf.signed) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.oneof
                 [((HsProtobuf.FieldNumber 4),
                   (Hs.pure SomethingNameOrIdName) <*> HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 9),
                   (Hs.pure SomethingNameOrIdSomeid) <*>
                     HsProtobuf.decodeMessageField)])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.SInt64)
                (HsProtobuf.Single "value")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.SInt32)
                (HsProtobuf.Single "another")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB Something where
        toEncodingPB (Something f1 f2 f4_or_f9)
          = (HsJSONPB.fieldsPB
               ["value" .= f1, "another" .= f2,
                case f4_or_f9 of
                    SomethingNameOrIdName f4 -> (HsJSONPB.pair "name" f4)
                    SomethingNameOrIdSomeid f9 -> (HsJSONPB.pair "someid" f9)
                    SomethingNameOrId_NOT_SET -> Hs.mempty])
 
instance HsJSONPB.FromJSONPB Something where
        parseJSONPB
          = (HsJSONPB.withObject "Something"
               (\ obj ->
                  (Hs.pure Something) <*> obj .: "value" <*> obj .: "another" <*>
                    Hs.msum
                      [SomethingNameOrIdName <$> (HsJSONPB.parseField obj "name"),
                       SomethingNameOrIdSomeid <$> (HsJSONPB.parseField obj "someid"),
                       Hs.pure SomethingNameOrId_NOT_SET]))
 
data SomethingNameOrId = SomethingNameOrId_NOT_SET
                       | SomethingNameOrIdName Hs.Text
                       | SomethingNameOrIdSomeid Hs.Int32
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)