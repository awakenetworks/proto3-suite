{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module JSONPBTestTypes where
import qualified Prelude as Hs
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Wire as HsProtobuf
import Control.Applicative ((<*>), (<|>))
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.ByteString as Hs
import qualified Data.String as Hs (fromString)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Generics as Hs
import qualified GHC.Enum as Hs
import qualified JSONPBTestTypesImport
 
data Scalar32 = Scalar32{scalar32I32 :: Hs.Int32,
                         scalar32U32 :: Hs.Word32, scalar32S32 :: Hs.Int32,
                         scalar32F32 :: HsProtobuf.Fixed Hs.Word32,
                         scalar32Sf32 :: HsProtobuf.Fixed Hs.Int32}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named Scalar32 where
        nameOf _ = (Hs.fromString "Scalar32")
 
instance HsProtobuf.Message Scalar32 where
        encodeMessage _
          Scalar32{scalar32I32 = scalar32I32, scalar32U32 = scalar32U32,
                   scalar32S32 = scalar32S32, scalar32F32 = scalar32F32,
                   scalar32Sf32 = scalar32Sf32}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   scalar32I32),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   scalar32U32),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (HsProtobuf.Signed scalar32S32)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   scalar32F32),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   (HsProtobuf.Signed scalar32Sf32))])
        decodeMessage _
          = (Hs.pure Scalar32) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              ((Hs.pure HsProtobuf.signed) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              ((Hs.pure HsProtobuf.signed) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 5)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "i32")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt32)
                (HsProtobuf.Single "u32")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.SInt32)
                (HsProtobuf.Single "s32")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Fixed32)
                (HsProtobuf.Single "f32")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.SFixed32)
                (HsProtobuf.Single "sf32")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB Scalar32 where
        toEncodingPB opts (Scalar32 f1 f2 f3 f4 f5)
          = (HsJSONPB.fieldsPB opts
               ["i32" .= f1, "u32" .= f2, "s32" .= f3, "f32" .= f4, "sf32" .= f5])
 
instance HsJSONPB.FromJSONPB Scalar32 where
        parseJSONPB
          = (HsJSONPB.withObject "Scalar32"
               (\ obj ->
                  (Hs.pure Scalar32) <*> obj .: "i32" <*> obj .: "u32" <*>
                    obj .: "s32"
                    <*> obj .: "f32"
                    <*> obj .: "sf32"))
 
data Scalar64 = Scalar64{scalar64I64 :: Hs.Int64,
                         scalar64U64 :: Hs.Word64, scalar64S64 :: Hs.Int64,
                         scalar64F64 :: HsProtobuf.Fixed Hs.Word64,
                         scalar64Sf64 :: HsProtobuf.Fixed Hs.Int64}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named Scalar64 where
        nameOf _ = (Hs.fromString "Scalar64")
 
instance HsProtobuf.Message Scalar64 where
        encodeMessage _
          Scalar64{scalar64I64 = scalar64I64, scalar64U64 = scalar64U64,
                   scalar64S64 = scalar64S64, scalar64F64 = scalar64F64,
                   scalar64Sf64 = scalar64Sf64}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   scalar64I64),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   scalar64U64),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (HsProtobuf.Signed scalar64S64)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   scalar64F64),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   (HsProtobuf.Signed scalar64Sf64))])
        decodeMessage _
          = (Hs.pure Scalar64) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              ((Hs.pure HsProtobuf.signed) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              ((Hs.pure HsProtobuf.signed) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 5)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "i64")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "u64")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.SInt64)
                (HsProtobuf.Single "s64")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Fixed64)
                (HsProtobuf.Single "f64")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.SFixed64)
                (HsProtobuf.Single "sf64")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB Scalar64 where
        toEncodingPB opts (Scalar64 f1 f2 f3 f4 f5)
          = (HsJSONPB.fieldsPB opts
               ["i64" .= f1, "u64" .= f2, "s64" .= f3, "f64" .= f4, "sf64" .= f5])
 
instance HsJSONPB.FromJSONPB Scalar64 where
        parseJSONPB
          = (HsJSONPB.withObject "Scalar64"
               (\ obj ->
                  (Hs.pure Scalar64) <*> obj .: "i64" <*> obj .: "u64" <*>
                    obj .: "s64"
                    <*> obj .: "f64"
                    <*> obj .: "sf64"))
 
data ScalarFP = ScalarFP{scalarFPF :: Hs.Float,
                         scalarFPD :: Hs.Double}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named ScalarFP where
        nameOf _ = (Hs.fromString "ScalarFP")
 
instance HsProtobuf.Message ScalarFP where
        encodeMessage _
          ScalarFP{scalarFPF = scalarFPF, scalarFPD = scalarFPD}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   scalarFPF),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   scalarFPD)])
        decodeMessage _
          = (Hs.pure ScalarFP) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Float)
                (HsProtobuf.Single "f")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Double)
                (HsProtobuf.Single "d")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB ScalarFP where
        toEncodingPB opts (ScalarFP f1 f2)
          = (HsJSONPB.fieldsPB opts ["f" .= f1, "d" .= f2])
 
instance HsJSONPB.FromJSONPB ScalarFP where
        parseJSONPB
          = (HsJSONPB.withObject "ScalarFP"
               (\ obj -> (Hs.pure ScalarFP) <*> obj .: "f" <*> obj .: "d"))
 
data Stringly = Stringly{stringlyStr :: Hs.Text,
                         stringlyBs :: Hs.ByteString}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named Stringly where
        nameOf _ = (Hs.fromString "Stringly")
 
instance HsProtobuf.Message Stringly where
        encodeMessage _
          Stringly{stringlyStr = stringlyStr, stringlyBs = stringlyBs}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   stringlyStr),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   stringlyBs)])
        decodeMessage _
          = (Hs.pure Stringly) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "str")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "bs")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB Stringly where
        toEncodingPB opts (Stringly f1 f2)
          = (HsJSONPB.fieldsPB opts ["str" .= f1, "bs" .= f2])
 
instance HsJSONPB.FromJSONPB Stringly where
        parseJSONPB
          = (HsJSONPB.withObject "Stringly"
               (\ obj -> (Hs.pure Stringly) <*> obj .: "str" <*> obj .: "bs"))
 
data Repeat = Repeat{repeatI32s :: Hs.Vector Hs.Int32,
                     repeatI64s :: Hs.Vector Hs.Int64}
            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named Repeat where
        nameOf _ = (Hs.fromString "Repeat")
 
instance HsProtobuf.Message Repeat where
        encodeMessage _
          Repeat{repeatI32s = repeatI32s, repeatI64s = repeatI64s}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (HsProtobuf.PackedVec repeatI32s)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (HsProtobuf.PackedVec repeatI64s))])
        decodeMessage _
          = (Hs.pure Repeat) <*>
              ((Hs.pure HsProtobuf.packedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              ((Hs.pure HsProtobuf.packedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.Int32)
                (HsProtobuf.Single "i32s")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated HsProtobuf.Int64)
                (HsProtobuf.Single "i64s")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB Repeat where
        toEncodingPB opts (Repeat f1 f2)
          = (HsJSONPB.fieldsPB opts ["i32s" .= f1, "i64s" .= f2])
 
instance HsJSONPB.FromJSONPB Repeat where
        parseJSONPB
          = (HsJSONPB.withObject "Repeat"
               (\ obj -> (Hs.pure Repeat) <*> obj .: "i32s" <*> obj .: "i64s"))
 
data Nested = Nested{nestedNestedInner ::
                     Hs.Maybe JSONPBTestTypes.Nested_Inner}
            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named Nested where
        nameOf _ = (Hs.fromString "Nested")
 
instance HsProtobuf.Message Nested where
        encodeMessage _ Nested{nestedNestedInner = nestedNestedInner}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (HsProtobuf.Nested nestedNestedInner))])
        decodeMessage _
          = (Hs.pure Nested) <*>
              ((Hs.pure HsProtobuf.nested) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Inner")))
                (HsProtobuf.Single "nestedInner")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB Nested where
        toEncodingPB opts (Nested f1)
          = (HsJSONPB.fieldsPB opts ["nestedInner" .= f1])
 
instance HsJSONPB.FromJSONPB Nested where
        parseJSONPB
          = (HsJSONPB.withObject "Nested"
               (\ obj -> (Hs.pure Nested) <*> obj .: "nestedInner"))
 
data Nested_Inner = Nested_Inner{nested_InnerI64 :: Hs.Int64}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named Nested_Inner where
        nameOf _ = (Hs.fromString "Nested_Inner")
 
instance HsProtobuf.Message Nested_Inner where
        encodeMessage _ Nested_Inner{nested_InnerI64 = nested_InnerI64}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   nested_InnerI64)])
        decodeMessage _
          = (Hs.pure Nested_Inner) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "i64")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB Nested_Inner where
        toEncodingPB opts (Nested_Inner f1)
          = (HsJSONPB.fieldsPB opts ["i64" .= f1])
 
instance HsJSONPB.FromJSONPB Nested_Inner where
        parseJSONPB
          = (HsJSONPB.withObject "Nested_Inner"
               (\ obj -> (Hs.pure Nested_Inner) <*> obj .: "i64"))
 
data Trivial = Trivial{trivialTrivialField :: Hs.Int32}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named Trivial where
        nameOf _ = (Hs.fromString "Trivial")
 
instance HsProtobuf.Message Trivial where
        encodeMessage _ Trivial{trivialTrivialField = trivialTrivialField}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   trivialTrivialField)])
        decodeMessage _
          = (Hs.pure Trivial) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "trivialField")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB Trivial where
        toEncodingPB opts (Trivial f1)
          = (HsJSONPB.fieldsPB opts ["trivialField" .= f1])
 
instance HsJSONPB.FromJSONPB Trivial where
        parseJSONPB
          = (HsJSONPB.withObject "Trivial"
               (\ obj -> (Hs.pure Trivial) <*> obj .: "trivialField"))
 
data MultipleFields = MultipleFields{multipleFieldsMultiFieldDouble
                                     :: Hs.Double,
                                     multipleFieldsMultiFieldFloat :: Hs.Float,
                                     multipleFieldsMultiFieldInt32 :: Hs.Int32,
                                     multipleFieldsMultiFieldInt64 :: Hs.Int64,
                                     multipleFieldsMultiFieldString :: Hs.Text,
                                     multipleFieldsMultiFieldBool :: Hs.Bool}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named MultipleFields where
        nameOf _ = (Hs.fromString "MultipleFields")
 
instance HsProtobuf.Message MultipleFields where
        encodeMessage _
          MultipleFields{multipleFieldsMultiFieldDouble =
                           multipleFieldsMultiFieldDouble,
                         multipleFieldsMultiFieldFloat = multipleFieldsMultiFieldFloat,
                         multipleFieldsMultiFieldInt32 = multipleFieldsMultiFieldInt32,
                         multipleFieldsMultiFieldInt64 = multipleFieldsMultiFieldInt64,
                         multipleFieldsMultiFieldString = multipleFieldsMultiFieldString,
                         multipleFieldsMultiFieldBool = multipleFieldsMultiFieldBool}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   multipleFieldsMultiFieldDouble),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   multipleFieldsMultiFieldFloat),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   multipleFieldsMultiFieldInt32),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   multipleFieldsMultiFieldInt64),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   multipleFieldsMultiFieldString),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   multipleFieldsMultiFieldBool)])
        decodeMessage _
          = (Hs.pure MultipleFields) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Double)
                (HsProtobuf.Single "multiFieldDouble")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Float)
                (HsProtobuf.Single "multiFieldFloat")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "multiFieldInt32")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "multiFieldInt64")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "multiFieldString")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "multiFieldBool")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB MultipleFields where
        toEncodingPB opts (MultipleFields f1 f2 f3 f4 f5 f6)
          = (HsJSONPB.fieldsPB opts
               ["multiFieldDouble" .= f1, "multiFieldFloat" .= f2,
                "multiFieldInt32" .= f3, "multiFieldInt64" .= f4,
                "multiFieldString" .= f5, "multiFieldBool" .= f6])
 
instance HsJSONPB.FromJSONPB MultipleFields where
        parseJSONPB
          = (HsJSONPB.withObject "MultipleFields"
               (\ obj ->
                  (Hs.pure MultipleFields) <*> obj .: "multiFieldDouble" <*>
                    obj .: "multiFieldFloat"
                    <*> obj .: "multiFieldInt32"
                    <*> obj .: "multiFieldInt64"
                    <*> obj .: "multiFieldString"
                    <*> obj .: "multiFieldBool"))
 
data SignedInts = SignedInts{signedIntsSigned32 :: Hs.Int32,
                             signedIntsSigned64 :: Hs.Int64}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named SignedInts where
        nameOf _ = (Hs.fromString "SignedInts")
 
instance HsProtobuf.Message SignedInts where
        encodeMessage _
          SignedInts{signedIntsSigned32 = signedIntsSigned32,
                     signedIntsSigned64 = signedIntsSigned64}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (HsProtobuf.Signed signedIntsSigned32)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (HsProtobuf.Signed signedIntsSigned64))])
        decodeMessage _
          = (Hs.pure SignedInts) <*>
              ((Hs.pure HsProtobuf.signed) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              ((Hs.pure HsProtobuf.signed) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.SInt32)
                (HsProtobuf.Single "signed32")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.SInt64)
                (HsProtobuf.Single "signed64")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB SignedInts where
        toEncodingPB opts (SignedInts f1 f2)
          = (HsJSONPB.fieldsPB opts ["signed32" .= f1, "signed64" .= f2])
 
instance HsJSONPB.FromJSONPB SignedInts where
        parseJSONPB
          = (HsJSONPB.withObject "SignedInts"
               (\ obj ->
                  (Hs.pure SignedInts) <*> obj .: "signed32" <*> obj .: "signed64"))
 
data WithEnum = WithEnum{withEnumEnumField ::
                         HsProtobuf.Enumerated JSONPBTestTypes.WithEnum_TestEnum}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named WithEnum where
        nameOf _ = (Hs.fromString "WithEnum")
 
instance HsProtobuf.Message WithEnum where
        encodeMessage _ WithEnum{withEnumEnumField = withEnumEnumField}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   withEnumEnumField)])
        decodeMessage _
          = (Hs.pure WithEnum) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "TestEnum")))
                (HsProtobuf.Single "enumField")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB WithEnum where
        toEncodingPB opts (WithEnum f1)
          = (HsJSONPB.fieldsPB opts ["enumField" .= f1])
 
instance HsJSONPB.FromJSONPB WithEnum where
        parseJSONPB
          = (HsJSONPB.withObject "WithEnum"
               (\ obj -> (Hs.pure WithEnum) <*> obj .: "enumField"))
 
data WithEnum_TestEnum = WithEnum_TestEnumENUM1
                       | WithEnum_TestEnumENUM2
                       | WithEnum_TestEnumENUM3
                       deriving (Hs.Show, Hs.Bounded, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named WithEnum_TestEnum where
        nameOf _ = (Hs.fromString "WithEnum_TestEnum")
 
instance Hs.Enum WithEnum_TestEnum where
        toEnum 0 = WithEnum_TestEnumENUM1
        toEnum 1 = WithEnum_TestEnumENUM2
        toEnum 2 = WithEnum_TestEnumENUM3
        toEnum i = (Hs.toEnumError "WithEnum_TestEnum" i (0 :: Hs.Int, 2))
        fromEnum (WithEnum_TestEnumENUM1) = 0
        fromEnum (WithEnum_TestEnumENUM2) = 1
        fromEnum (WithEnum_TestEnumENUM3) = 2
        succ (WithEnum_TestEnumENUM1) = WithEnum_TestEnumENUM2
        succ (WithEnum_TestEnumENUM2) = WithEnum_TestEnumENUM3
        succ _ = Hs.succError "WithEnum_TestEnum"
        pred (WithEnum_TestEnumENUM2) = WithEnum_TestEnumENUM1
        pred (WithEnum_TestEnumENUM3) = WithEnum_TestEnumENUM2
        pred _ = Hs.predError "WithEnum_TestEnum"
 
instance HsJSONPB.ToJSONPB WithEnum_TestEnum where
        toEncodingPB _ = HsJSONPB.namedEncoding
 
instance HsJSONPB.FromJSONPB WithEnum_TestEnum where
        parseJSONPB (HsJSONPB.String "ENUM1")
          = Hs.pure WithEnum_TestEnumENUM1
        parseJSONPB (HsJSONPB.String "ENUM2")
          = Hs.pure WithEnum_TestEnumENUM2
        parseJSONPB (HsJSONPB.String "ENUM3")
          = Hs.pure WithEnum_TestEnumENUM3
        parseJSONPB v = (HsJSONPB.typeMismatch "WithEnum_TestEnum" v)
 
data WithNesting = WithNesting{withNestingNestedMessage ::
                               Hs.Maybe JSONPBTestTypes.WithNesting_Nested}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named WithNesting where
        nameOf _ = (Hs.fromString "WithNesting")
 
instance HsProtobuf.Message WithNesting where
        encodeMessage _
          WithNesting{withNestingNestedMessage = withNestingNestedMessage}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (HsProtobuf.Nested withNestingNestedMessage))])
        decodeMessage _
          = (Hs.pure WithNesting) <*>
              ((Hs.pure HsProtobuf.nested) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Nested")))
                (HsProtobuf.Single "nestedMessage")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB WithNesting where
        toEncodingPB opts (WithNesting f1)
          = (HsJSONPB.fieldsPB opts ["nestedMessage" .= f1])
 
instance HsJSONPB.FromJSONPB WithNesting where
        parseJSONPB
          = (HsJSONPB.withObject "WithNesting"
               (\ obj -> (Hs.pure WithNesting) <*> obj .: "nestedMessage"))
 
data WithNesting_Nested = WithNesting_Nested{withNesting_NestedNestedField1
                                             :: Hs.Text,
                                             withNesting_NestedNestedField2 :: Hs.Int32,
                                             withNesting_NestedNestedPacked :: Hs.Vector Hs.Int32,
                                             withNesting_NestedNestedUnpacked :: Hs.Vector Hs.Int32}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named WithNesting_Nested where
        nameOf _ = (Hs.fromString "WithNesting_Nested")
 
instance HsProtobuf.Message WithNesting_Nested where
        encodeMessage _
          WithNesting_Nested{withNesting_NestedNestedField1 =
                               withNesting_NestedNestedField1,
                             withNesting_NestedNestedField2 = withNesting_NestedNestedField2,
                             withNesting_NestedNestedPacked = withNesting_NestedNestedPacked,
                             withNesting_NestedNestedUnpacked =
                               withNesting_NestedNestedUnpacked}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   withNesting_NestedNestedField1),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   withNesting_NestedNestedField2),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (HsProtobuf.PackedVec withNesting_NestedNestedPacked)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (HsProtobuf.UnpackedVec withNesting_NestedNestedUnpacked))])
        decodeMessage _
          = (Hs.pure WithNesting_Nested) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              ((Hs.pure HsProtobuf.packedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              ((Hs.pure HsProtobuf.unpackedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "nestedField1")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "nestedField2")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Repeated HsProtobuf.Int32)
                (HsProtobuf.Single "nestedPacked")
                [(HsProtobuf.DotProtoOption (HsProtobuf.Single "packed")
                    (HsProtobuf.BoolLit Hs.True))]
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Repeated HsProtobuf.Int32)
                (HsProtobuf.Single "nestedUnpacked")
                [(HsProtobuf.DotProtoOption (HsProtobuf.Single "packed")
                    (HsProtobuf.BoolLit Hs.False))]
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB WithNesting_Nested where
        toEncodingPB opts (WithNesting_Nested f1 f2 f3 f4)
          = (HsJSONPB.fieldsPB opts
               ["nestedField1" .= f1, "nestedField2" .= f2, "nestedPacked" .= f3,
                "nestedUnpacked" .= f4])
 
instance HsJSONPB.FromJSONPB WithNesting_Nested where
        parseJSONPB
          = (HsJSONPB.withObject "WithNesting_Nested"
               (\ obj ->
                  (Hs.pure WithNesting_Nested) <*> obj .: "nestedField1" <*>
                    obj .: "nestedField2"
                    <*> obj .: "nestedPacked"
                    <*> obj .: "nestedUnpacked"))
 
data WithNestingRepeated = WithNestingRepeated{withNestingRepeatedNestedMessages
                                               ::
                                               Hs.Vector JSONPBTestTypes.WithNestingRepeated_Nested}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named WithNestingRepeated where
        nameOf _ = (Hs.fromString "WithNestingRepeated")
 
instance HsProtobuf.Message WithNestingRepeated where
        encodeMessage _
          WithNestingRepeated{withNestingRepeatedNestedMessages =
                                withNestingRepeatedNestedMessages}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (HsProtobuf.NestedVec withNestingRepeatedNestedMessages))])
        decodeMessage _
          = (Hs.pure WithNestingRepeated) <*>
              ((Hs.pure HsProtobuf.nestedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Nested")))
                (HsProtobuf.Single "nestedMessages")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB WithNestingRepeated where
        toEncodingPB opts (WithNestingRepeated f1)
          = (HsJSONPB.fieldsPB opts ["nestedMessages" .= f1])
 
instance HsJSONPB.FromJSONPB WithNestingRepeated where
        parseJSONPB
          = (HsJSONPB.withObject "WithNestingRepeated"
               (\ obj ->
                  (Hs.pure WithNestingRepeated) <*> obj .: "nestedMessages"))
 
data WithNestingRepeated_Nested = WithNestingRepeated_Nested{withNestingRepeated_NestedNestedField1
                                                             :: Hs.Text,
                                                             withNestingRepeated_NestedNestedField2
                                                             :: Hs.Int32,
                                                             withNestingRepeated_NestedNestedPacked
                                                             :: Hs.Vector Hs.Int32,
                                                             withNestingRepeated_NestedNestedUnpacked
                                                             :: Hs.Vector Hs.Int32}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named WithNestingRepeated_Nested where
        nameOf _ = (Hs.fromString "WithNestingRepeated_Nested")
 
instance HsProtobuf.Message WithNestingRepeated_Nested where
        encodeMessage _
          WithNestingRepeated_Nested{withNestingRepeated_NestedNestedField1 =
                                       withNestingRepeated_NestedNestedField1,
                                     withNestingRepeated_NestedNestedField2 =
                                       withNestingRepeated_NestedNestedField2,
                                     withNestingRepeated_NestedNestedPacked =
                                       withNestingRepeated_NestedNestedPacked,
                                     withNestingRepeated_NestedNestedUnpacked =
                                       withNestingRepeated_NestedNestedUnpacked}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   withNestingRepeated_NestedNestedField1),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   withNestingRepeated_NestedNestedField2),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (HsProtobuf.PackedVec withNestingRepeated_NestedNestedPacked)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (HsProtobuf.UnpackedVec
                      withNestingRepeated_NestedNestedUnpacked))])
        decodeMessage _
          = (Hs.pure WithNestingRepeated_Nested) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              ((Hs.pure HsProtobuf.packedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              ((Hs.pure HsProtobuf.unpackedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "nestedField1")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "nestedField2")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Repeated HsProtobuf.Int32)
                (HsProtobuf.Single "nestedPacked")
                [(HsProtobuf.DotProtoOption (HsProtobuf.Single "packed")
                    (HsProtobuf.BoolLit Hs.True))]
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Repeated HsProtobuf.Int32)
                (HsProtobuf.Single "nestedUnpacked")
                [(HsProtobuf.DotProtoOption (HsProtobuf.Single "packed")
                    (HsProtobuf.BoolLit Hs.False))]
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB WithNestingRepeated_Nested where
        toEncodingPB opts (WithNestingRepeated_Nested f1 f2 f3 f4)
          = (HsJSONPB.fieldsPB opts
               ["nestedField1" .= f1, "nestedField2" .= f2, "nestedPacked" .= f3,
                "nestedUnpacked" .= f4])
 
instance HsJSONPB.FromJSONPB WithNestingRepeated_Nested where
        parseJSONPB
          = (HsJSONPB.withObject "WithNestingRepeated_Nested"
               (\ obj ->
                  (Hs.pure WithNestingRepeated_Nested) <*> obj .: "nestedField1" <*>
                    obj .: "nestedField2"
                    <*> obj .: "nestedPacked"
                    <*> obj .: "nestedUnpacked"))
 
data NestedInts = NestedInts{nestedIntsNestedInt1 :: Hs.Int32,
                             nestedIntsNestedInt2 :: Hs.Int32}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named NestedInts where
        nameOf _ = (Hs.fromString "NestedInts")
 
instance HsProtobuf.Message NestedInts where
        encodeMessage _
          NestedInts{nestedIntsNestedInt1 = nestedIntsNestedInt1,
                     nestedIntsNestedInt2 = nestedIntsNestedInt2}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   nestedIntsNestedInt1),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   nestedIntsNestedInt2)])
        decodeMessage _
          = (Hs.pure NestedInts) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "nestedInt1")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "nestedInt2")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB NestedInts where
        toEncodingPB opts (NestedInts f1 f2)
          = (HsJSONPB.fieldsPB opts ["nestedInt1" .= f1, "nestedInt2" .= f2])
 
instance HsJSONPB.FromJSONPB NestedInts where
        parseJSONPB
          = (HsJSONPB.withObject "NestedInts"
               (\ obj ->
                  (Hs.pure NestedInts) <*> obj .: "nestedInt1" <*>
                    obj .: "nestedInt2"))
 
data WithNestingRepeatedInts = WithNestingRepeatedInts{withNestingRepeatedIntsNestedInts
                                                       :: Hs.Vector JSONPBTestTypes.NestedInts}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named WithNestingRepeatedInts where
        nameOf _ = (Hs.fromString "WithNestingRepeatedInts")
 
instance HsProtobuf.Message WithNestingRepeatedInts where
        encodeMessage _
          WithNestingRepeatedInts{withNestingRepeatedIntsNestedInts =
                                    withNestingRepeatedIntsNestedInts}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (HsProtobuf.NestedVec withNestingRepeatedIntsNestedInts))])
        decodeMessage _
          = (Hs.pure WithNestingRepeatedInts) <*>
              ((Hs.pure HsProtobuf.nestedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "NestedInts")))
                (HsProtobuf.Single "nestedInts")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB WithNestingRepeatedInts where
        toEncodingPB opts (WithNestingRepeatedInts f1)
          = (HsJSONPB.fieldsPB opts ["nestedInts" .= f1])
 
instance HsJSONPB.FromJSONPB WithNestingRepeatedInts where
        parseJSONPB
          = (HsJSONPB.withObject "WithNestingRepeatedInts"
               (\ obj ->
                  (Hs.pure WithNestingRepeatedInts) <*> obj .: "nestedInts"))
 
data WithBytes = WithBytes{withBytesBytes1 :: Hs.ByteString,
                           withBytesBytes2 :: Hs.Vector Hs.ByteString}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named WithBytes where
        nameOf _ = (Hs.fromString "WithBytes")
 
instance HsProtobuf.Message WithBytes where
        encodeMessage _
          WithBytes{withBytesBytes1 = withBytesBytes1,
                    withBytesBytes2 = withBytesBytes2}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   withBytesBytes1),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (HsProtobuf.UnpackedVec withBytesBytes2))])
        decodeMessage _
          = (Hs.pure WithBytes) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              ((Hs.pure HsProtobuf.unpackedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "bytes1")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated HsProtobuf.Bytes)
                (HsProtobuf.Single "bytes2")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB WithBytes where
        toEncodingPB opts (WithBytes f1 f2)
          = (HsJSONPB.fieldsPB opts ["bytes1" .= f1, "bytes2" .= f2])
 
instance HsJSONPB.FromJSONPB WithBytes where
        parseJSONPB
          = (HsJSONPB.withObject "WithBytes"
               (\ obj ->
                  (Hs.pure WithBytes) <*> obj .: "bytes1" <*> obj .: "bytes2"))
 
data OutOfOrderFields = OutOfOrderFields{outOfOrderFieldsField1 ::
                                         Hs.Vector Hs.Word32,
                                         outOfOrderFieldsField2 :: Hs.Text,
                                         outOfOrderFieldsField3 :: Hs.Int64,
                                         outOfOrderFieldsField4 :: Hs.Vector Hs.Text}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named OutOfOrderFields where
        nameOf _ = (Hs.fromString "OutOfOrderFields")
 
instance HsProtobuf.Message OutOfOrderFields where
        encodeMessage _
          OutOfOrderFields{outOfOrderFieldsField1 = outOfOrderFieldsField1,
                           outOfOrderFieldsField2 = outOfOrderFieldsField2,
                           outOfOrderFieldsField3 = outOfOrderFieldsField3,
                           outOfOrderFieldsField4 = outOfOrderFieldsField4}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2001)
                   (HsProtobuf.PackedVec outOfOrderFieldsField1)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                   outOfOrderFieldsField2),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 30)
                   outOfOrderFieldsField3),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1002)
                   (HsProtobuf.UnpackedVec outOfOrderFieldsField4))])
        decodeMessage _
          = (Hs.pure OutOfOrderFields) <*>
              ((Hs.pure HsProtobuf.packedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2001)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 101))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 30))
              <*>
              ((Hs.pure HsProtobuf.unpackedvec) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1002)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2001)
                (HsProtobuf.Repeated HsProtobuf.UInt32)
                (HsProtobuf.Single "field1")
                [(HsProtobuf.DotProtoOption (HsProtobuf.Single "packed")
                    (HsProtobuf.BoolLit Hs.True))]
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 101)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "field2")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 30)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "field3")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1002)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "field4")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB OutOfOrderFields where
        toEncodingPB opts (OutOfOrderFields f2001 f101 f30 f1002)
          = (HsJSONPB.fieldsPB opts
               ["field1" .= f2001, "field2" .= f101, "field3" .= f30,
                "field4" .= f1002])
 
instance HsJSONPB.FromJSONPB OutOfOrderFields where
        parseJSONPB
          = (HsJSONPB.withObject "OutOfOrderFields"
               (\ obj ->
                  (Hs.pure OutOfOrderFields) <*> obj .: "field1" <*> obj .: "field2"
                    <*> obj .: "field3"
                    <*> obj .: "field4"))
 
data UsingImported = UsingImported{usingImportedImportedNesting ::
                                   Hs.Maybe JSONPBTestTypesImport.WithNesting,
                                   usingImportedLocalNesting ::
                                   Hs.Maybe JSONPBTestTypes.WithNesting}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named UsingImported where
        nameOf _ = (Hs.fromString "UsingImported")
 
instance HsProtobuf.Message UsingImported where
        encodeMessage _
          UsingImported{usingImportedImportedNesting =
                          usingImportedImportedNesting,
                        usingImportedLocalNesting = usingImportedLocalNesting}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                   (HsProtobuf.Nested usingImportedImportedNesting)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 200)
                   (HsProtobuf.Nested usingImportedLocalNesting))])
        decodeMessage _
          = (Hs.pure UsingImported) <*>
              ((Hs.pure HsProtobuf.nested) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 100)))
              <*>
              ((Hs.pure HsProtobuf.nested) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 200)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 100)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ["JSONPBTestTypesImport", "WithNesting"]))))
                (HsProtobuf.Single "importedNesting")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 200)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "WithNesting")))
                (HsProtobuf.Single "localNesting")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB UsingImported where
        toEncodingPB opts (UsingImported f100 f200)
          = (HsJSONPB.fieldsPB opts
               ["importedNesting" .= f100, "localNesting" .= f200])
 
instance HsJSONPB.FromJSONPB UsingImported where
        parseJSONPB
          = (HsJSONPB.withObject "UsingImported"
               (\ obj ->
                  (Hs.pure UsingImported) <*> obj .: "importedNesting" <*>
                    obj .: "localNesting"))
 
data Wrapped = Wrapped{wrappedWrapped ::
                       Hs.Maybe JSONPBTestTypes.Wrapped}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance HsProtobuf.Named Wrapped where
        nameOf _ = (Hs.fromString "Wrapped")
 
instance HsProtobuf.Message Wrapped where
        encodeMessage _ Wrapped{wrappedWrapped = wrappedWrapped}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (HsProtobuf.Nested wrappedWrapped))])
        decodeMessage _
          = (Hs.pure Wrapped) <*>
              ((Hs.pure HsProtobuf.nested) <*>
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Wrapped")))
                (HsProtobuf.Single "wrapped")
                []
                Hs.Nothing)]
 
instance HsJSONPB.ToJSONPB Wrapped where
        toEncodingPB opts (Wrapped f1)
          = (HsJSONPB.fieldsPB opts ["wrapped" .= f1])
 
instance HsJSONPB.FromJSONPB Wrapped where
        parseJSONPB
          = (HsJSONPB.withObject "Wrapped"
               (\ obj -> (Hs.pure Wrapped) <*> obj .: "wrapped"))